C                           DISCLAIMER
C 
C   This file was generated by TAF version 5.9.12
C 
C   FASTOPT DISCLAIMS  ALL  WARRANTIES,  EXPRESS  OR  IMPLIED,
C   INCLUDING (WITHOUT LIMITATION) ALL IMPLIED  WARRANTIES  OF
C   MERCHANTABILITY  OR FITNESS FOR A PARTICULAR PURPOSE, WITH
C   RESPECT TO THE SOFTWARE AND USER PROGRAMS.   IN  NO  EVENT
C   SHALL  FASTOPT BE LIABLE FOR ANY LOST OR ANTICIPATED PROF-
C   ITS, OR ANY INDIRECT, INCIDENTAL, EXEMPLARY,  SPECIAL,  OR
C   CONSEQUENTIAL  DAMAGES, WHETHER OR NOT FASTOPT WAS ADVISED
C   OF THE POSSIBILITY OF SUCH DAMAGES.
C 
C                           Haftungsbeschraenkung
C   FastOpt gibt ausdruecklich keine Gewaehr, explizit oder indirekt,
C   bezueglich der Brauchbarkeit  der Software  fuer einen bestimmten
C   Zweck.   Unter  keinen  Umstaenden   ist  FastOpt   haftbar  fuer
C   irgendeinen Verlust oder nicht eintretenden erwarteten Gewinn und
C   allen indirekten,  zufaelligen,  exemplarischen  oder  speziellen
C   Schaeden  oder  Folgeschaeden  unabhaengig  von einer eventuellen
C   Mitteilung darueber an FastOpt.
C 
      subroutine fwd_c_ad( fwd_c, fwd_c_ae, sal, sal_ad, temp, temp_ad, 
     $pres, pres_ad )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 5.9.12  **
C******************************************************************
C******************************************************************
      implicit none

C==============================================
C declare arguments
C==============================================
      real(kind=8), intent(out) :: fwd_c
      real(kind=8), intent(inout) :: fwd_c_ae
      double precision, intent(inout) :: pres
      double precision, intent(inout) :: pres_ad
      double precision, intent(in) :: sal
      double precision, intent(inout) :: sal_ad
      double precision, intent(in) :: temp
      double precision, intent(inout) :: temp_ad

C==============================================
C declare local variables
C==============================================
      double precision :: a
      double precision :: a_ad
      double precision :: b
      double precision :: b_ad
      double precision :: c0
      double precision :: cw
      double precision :: cw_ad
      double precision :: d
      double precision :: d_ad

C----------------------------------------------
C RESET LOCAL ADJOINT VARIABLES NO ALLOC
C----------------------------------------------
      a_ad = 0.d0
      b_ad = 0.d0
      cw_ad = 0.d0
      d_ad = 0.d0

C----------------------------------------------
C FUNCTION AND TAPE COMPUTATIONS
C----------------------------------------------
      c0 = 1402.388d0
      pres = pres/1.d1
      cw = c0+5.0383d0*temp+(-5.81090d-2)*temp**2+3.3432d-4*temp**3+(-
     $1.47797d-6)*temp**4+3.1419d-9*temp**5+(1.53563d-1+6.8999d-4*temp+(
     $-8.1829d-6)*temp**2+1.3632d-7*temp**3+(-6.1260d-10)*temp**4)*pres+
     $(3.12600d-5-1.7111d-6*temp+2.59860d-8*temp**2-2.5353d-10*temp**3+
     $1.04150d-12*temp**4)*pres**2+((-9.7729d-9)+3.8513d-10*temp+(-
     $2.3654d-12)*temp**2)*pres**3
      a = 1.389d0-1.2620d-2*temp+7.166d-5*temp**2+2.0080d-6*temp**3+(-
     $3.21d-8)*temp**4+(9.47420d-5-1.2583d-5*temp+(-6.4928d-8)*temp**2+
     $1.0515d-8*temp**3+(-2.0142d-10)*temp**4)*pres+((-3.9064d-7)+
     $9.1061d-9*temp+(-1.6009d-10)*temp**2+7.99400d-12*temp**3)*pres**2+
     $(1.10000d-10+6.6510d-12*temp+(-3.3910d-13)*temp**2)*pres**3
      b = (-0.01922d0)-4.4200d-5*temp+(7.3637d-5+1.7950d-7*temp)*pres
      d = 1.727d-3-7.9836d-6*pres
      fwd_c = cw+a*sal+b*sal**(3./2.)+d*sal**2

C----------------------------------------------
C ADJOINT COMPUTATIONS
C----------------------------------------------
      a_ad = a_ad+fwd_c_ae*sal
      b_ad = b_ad+fwd_c_ae*sal**1.5
      cw_ad = cw_ad+fwd_c_ae
      d_ad = d_ad+fwd_c_ae*sal**2
      sal_ad = sal_ad+fwd_c_ae*(a+1.5*b*sal**0.5+2*d*sal)
      fwd_c_ae = 0._8
      pres_ad = pres_ad-7.9836d-6*d_ad
      d_ad = 0.d0
      pres_ad = pres_ad+b_ad*(7.3637d-5+1.7950d-7*temp)
      temp_ad = temp_ad+b_ad*((-0.0000442d0)+1.7950d-7*pres)
      b_ad = 0.d0
      pres_ad = pres_ad+a_ad*(9.47420d-5-1.2583d-5*temp-6.4928d-8*temp**
     $2+1.0515d-8*temp**3-2.0142d-10*temp**4+2*((-3.9064d-7)+9.1061d-9*
     $temp-1.6009d-10*temp**2+7.99400d-12*temp**3)*pres+3*(1.10000d-10+
     $6.6510d-12*temp-3.391d-13*temp**2)*pres**2)
      temp_ad = temp_ad+a_ad*((-0.01262d0)+0.00014332d0*temp+6.024d-6*
     $temp**2-1.284d-7*temp**3+((-0.000012583d0)+(-1.29856d-7)*temp+
     $3.1545d-8*temp**2-8.0568d-10*temp**3)*pres+(9.1061d-9+(-3.2018d-
     $10)*temp+2.3982d-11*temp**2)*pres**2+(6.6510d-12+(-6.782d-13)*
     $temp)*pres**3)
      a_ad = 0.d0
      pres_ad = pres_ad+cw_ad*(1.53563d-1+6.8999d-4*temp-8.1829d-6*temp*
     $*2+1.3632d-7*temp**3-6.126d-10*temp**4+2*(3.12600d-5-1.7111d-6*
     $temp+2.59860d-8*temp**2-2.5353d-10*temp**3+1.04150d-12*temp**4)*
     $pres+3*((-9.7729d-9)+3.8513d-10*temp-2.3654d-12*temp**2)*pres**2)
      temp_ad = temp_ad+cw_ad*(5.0383d0+(-0.116218d0)*temp+0.00100296d0*
     $temp**2-5.91188d-6*temp**3+1.57095d-8*temp**4+(6.8999d-4+(-
     $0.0000163658d0)*temp+4.0896d-7*temp**2-2.4504d-9*temp**3)*pres+((-
     $1.7111d-6)+5.1972d-8*temp-7.6059d-10*temp**2+4.166d-12*temp**3)*
     $pres**2+(3.8513d-10+(-4.7308d-12)*temp)*pres**3)
      cw_ad = 0.d0
      pres_ad = 0.1d0*pres_ad

      end subroutine fwd_c_ad

      function   fwd_c( sal, temp, pres )
C******************************************************************
C******************************************************************
C** This routine was generated by Automatic differentiation.     **
C** FastOpt: Transformation of Algorithm in Fortran, TAF 5.9.12  **
C******************************************************************
C******************************************************************
      implicit none

C==============================================
C declare arguments
C==============================================
      real(kind=8) :: fwd_c
      double precision, intent(inout) :: pres
      double precision, intent(in) :: sal
      double precision, intent(in) :: temp

C==============================================
C declare local variables
C==============================================
      double precision :: a
      double precision :: b
      double precision :: c0
      double precision :: cw
      double precision :: d

      c0 = 1402.388d0
      cw = 0.d0
      a = 0.d0
      b = 0.d0
      d = 0.d0
      pres = pres/1.d1
      cw = c0+5.0383d0*temp+(-5.81090d-2)*temp**2+3.3432d-4*temp**3+(-
     $1.47797d-6)*temp**4+3.1419d-9*temp**5+(1.53563d-1+6.8999d-4*temp+(
     $-8.1829d-6)*temp**2+1.3632d-7*temp**3+(-6.1260d-10)*temp**4)*pres+
     $(3.12600d-5-1.7111d-6*temp+2.59860d-8*temp**2-2.5353d-10*temp**3+
     $1.04150d-12*temp**4)*pres**2+((-9.7729d-9)+3.8513d-10*temp+(-
     $2.3654d-12)*temp**2)*pres**3
      a = 1.389d0-1.2620d-2*temp+7.166d-5*temp**2+2.0080d-6*temp**3+(-
     $3.21d-8)*temp**4+(9.47420d-5-1.2583d-5*temp+(-6.4928d-8)*temp**2+
     $1.0515d-8*temp**3+(-2.0142d-10)*temp**4)*pres+((-3.9064d-7)+
     $9.1061d-9*temp+(-1.6009d-10)*temp**2+7.99400d-12*temp**3)*pres**2+
     $(1.10000d-10+6.6510d-12*temp+(-3.3910d-13)*temp**2)*pres**3
      b = (-0.01922d0)-4.4200d-5*temp+(7.3637d-5+1.7950d-7*temp)*pres
      d = 1.727d-3-7.9836d-6*pres
      fwd_c = cw+a*sal+b*sal**(3./2.)+d*sal**2
      end function   fwd_c
